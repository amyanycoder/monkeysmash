extern crate rouille;

use std::env;
use std::fs;
use crate::dictionary::{build_database};

mod dictionary;
mod parser;
mod fsm;


fn main() {
    //fetches runtime arguments
    let args: Vec<String> = env::args().collect();
    let flag = &args[1];

    //handles runtime arguments.  Depending on arguments, builds the database, starts the server, or prints poem to command line.
    match flag.as_str() {     
        "b" => build_database(),
        "r" => print!("{}", fsm::assemble_poem()),
        "h" => println!("Proper usage: \n cargo run s:  Run server at localhost:8000 \n cargo run r:  Print poem to command line 
 cargo run b: Builds database of words \n cargo run h:  Print help message to command line"), 
        "s" => run_server(),
        _ => println!("Invalid input.  For a list of valid args, try cargo run h.")
    }
    
}

//activates the rouille server, hosting the project on localhost:8000
fn run_server() {
    rouille::start_server("0.0.0.0:8000", move |request| {

        //sets index.html to the default page
        if request.raw_url() == "/" {
            let response = rouille::Response::redirect_301("/index.html");

            return response;
        }
        //sets the page generated by gen_poem_page() to the address "/poem.html"
        else if request.raw_url() == "/poem.html" {
            let response = rouille::Response::html(gen_poem_page());
        
            return response;
        } 
        else {
            //allows all files in the web folder that are not already accounted for to be accessed from localhost:8000
            let response = rouille::match_assets(request, "web");

            if response.is_success() {
                return response;
            }
        }
        //return 404 error if url not recognized
        rouille::Response::html("404 error!  Poetry not found!").with_status_code(404)

    });
}


//generates a web page from poem.html.template and a random poem from assemble_poem_web()
fn gen_poem_page() -> String {
    //replaces "XXXXXXXXXXX" in poem.html.template with a random poem
    fs::read_to_string("web/poem.html.template").expect("Couldn't read file")
        .replace("XXXXXXXXXXX", &fsm::assemble_poem())
}